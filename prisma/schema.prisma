datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model MerchantAccount {
  merchant_id   String @id @db.VarChar(255)
  merchant_name String @db.VarChar(255)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  accounts      Account[]       // Relation to multiple accounts
  transactions  Transaction[]   // Relation to multiple transactions
  reconRules    ReconRule[]     // Relation to recon rules
  // Future: Add relations to other models like 'Account' for the Smart Ledger
}

enum ProcessTaskType {
  PROCESS_STAGING_ENTRY
  // Future task types can be added here
}

enum EntryStatus {
  EXPECTED
  POSTED
  ARCHIVED
}

model Entry {
  entry_id         String      @id @default(cuid())
  account_id       String
  transaction_id   String      // Foreign Key to Transaction model
  entry_type       EntryType
  amount           Decimal
  currency         String
  status           EntryStatus
  effective_date   DateTime    // Renamed from entry_date for consistency
  metadata         Json?       @db.JsonB
  discarded_at     DateTime?   // Should be set when status is ARCHIVED
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  account          Account     @relation(fields: [account_id], references: [account_id])
  transaction      Transaction  @relation(fields: [transaction_id], references: [transaction_id])

  @@index([account_id])
  @@index([transaction_id])
  @@index([status])
  @@index([effective_date])
}

enum TransactionStatus {
  EXPECTED
  POSTED
  MISMATCH
  ARCHIVED
}

model Transaction {
  transaction_id         String            @id @default(cuid())
  logical_transaction_id String            @default(cuid())
  version                Int               @default(1)
  amount                 Decimal           @db.Decimal(20, 4)
  currency               String            @db.VarChar(3)
  merchant_id            String            @db.VarChar(255)
  status                 TransactionStatus
  created_at             DateTime          @default(now())
  updated_at             DateTime          @updatedAt
  discarded_at           DateTime?         
  metadata               Json?             @db.JsonB

  merchant               MerchantAccount   @relation(fields: [merchant_id], references: [merchant_id])
  entries                Entry[]           // Relation to multiple entries

  @@index([logical_transaction_id])
  @@index([merchant_id])
  @@index([status])
  @@unique([logical_transaction_id, version])
}

// Future: Define other models for the Smart Ledger here

enum ProcessTaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  RETRY // Added for tasks that might be retried
}

model ProcessTracker {
  task_id      String            @id @default(cuid())
  task_type    ProcessTaskType
  payload      Json              // e.g., { "staging_entry_id": "some_id" }
  status       ProcessTaskStatus @default(PENDING)
  attempts     Int               @default(0)
  last_error   String?
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
  processing_started_at DateTime? // When processing began
  completed_at DateTime?          // When task reached a final state (COMPLETED or FAILED non-retryable)

  @@index([status])
  @@index([task_type])
  @@index([created_at])
}

model ReconRule {
  id               String   @id @default(cuid())
  merchant_id      String   @db.VarChar(255)
  account_one_id   String
  account_two_id   String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  merchant         MerchantAccount @relation(fields: [merchant_id], references: [merchant_id])
  accountOne       Account  @relation("ReconRuleAccountOne", fields: [account_one_id], references: [account_id])
  accountTwo       Account  @relation("ReconRuleAccountTwo", fields: [account_two_id], references: [account_id])

  @@unique([account_one_id, account_two_id], name: "unique_recon_rule_pair")
  @@index([account_one_id])
  @@index([account_two_id])
  @@index([merchant_id])
}

enum StagingEntryStatus {
  PENDING 
  NEEDS_MANUAL_REVIEW
  PROCESSED
}

enum StagingEntryProcessingMode {
  CONFIRMATION // Indicates the entry should match an existing expectation
  TRANSACTION  // Indicates the entry should create a new transaction and its expectation
}

model StagingEntry {
  staging_entry_id String                       @id @default(cuid())
  account_id         String
  entry_type         EntryType
  amount             Decimal
  currency           String
  status             StagingEntryStatus           @default(PENDING)
  processing_mode    StagingEntryProcessingMode @default(CONFIRMATION) // New mandatory field with default
  effective_date     DateTime
  metadata           Json?                        @db.JsonB
  discarded_at       DateTime?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt

  account            Account              @relation(fields: [account_id], references: [account_id])

  @@index([account_id])
  @@index([status])
  @@index([effective_date])
}

enum EntryType {
  DEBIT
  CREDIT
}

model Account {
  account_id    String      @id @default(uuid())
  merchant_id   String      @db.VarChar(255)
  account_name  String      @db.VarChar(255)
  account_type  AccountType
  currency      String      @db.VarChar(3) // E.g., "USD", "EUR"
  initial_balance Decimal   @default(0) @db.Decimal(20, 4)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  merchant      MerchantAccount @relation(fields: [merchant_id], references: [merchant_id])
  reconRulesAsOne ReconRule[] @relation("ReconRuleAccountOne")
  reconRulesAsTwo ReconRule[] @relation("ReconRuleAccountTwo")
  stagingEntries  StagingEntry[]
  entries         Entry[]     // Relation to Entry model

  @@index([merchant_id])
}

enum AccountType {
  DEBIT_NORMAL  // Balances increase with debits, decrease with credits (e.g., Asset, Expense)
  CREDIT_NORMAL // Balances increase with credits, decrease with debits (e.g., Liability, Revenue, Equity)
}
